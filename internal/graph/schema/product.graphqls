type Product {
  id: String!
  name: String!
  description: String!
  price: Float!
  thumbnailID: String!
  thumbnail: Object!
  ownerID: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
}

type ProductPaginationResponse {
  meta: PaginationMeta!
  items: [Product!]!
}


input CreateProduct {
  name: String! @binding(constraint: "required,min=4,max=255", field:"name")
  description: String! @binding(constraint: "required,min=4,max=1000", field:"description")
  price: Float! @binding(constraint: "required,min=10000,max=10000000", field:"price")
  thumbnailID: String! @binding(constraint: "required,uuid4", field:"thumbnail")
}

input UpdateProduct {
  id: String! @binding(constraint: "required,uuid4", field:"id")
  name: String! @binding(constraint: "required,min=4,max=255", field:"name")
  description: String! @binding(constraint: "required,min=4,max=1000", field:"description")
  price: Float! @binding(constraint: "required,min=10000,max=10000000", field:"price")
  thumbnailID: String! @binding(constraint: "required,uuid4", field:"thumbnail")
}

extend type Mutation {
  createProduct(input: CreateProduct!): Product!
  upateProduct(input: UpdateProduct!): Product!
  deleteProductByID(id: String!): Boolean!
}

extend type Query {
  findProductByID(id: String! @binding(constraint: "required,uuid4", field:"id")): Product!
  findProducts(input: PaginationRequest): ProductPaginationResponse!
}
